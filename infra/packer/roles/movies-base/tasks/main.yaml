- name: Setup app user
  block:
  - name: Create a user 'web' with a home directory
    ansible.builtin.user:
      name: web

  - name: Copy over profile
    template:
      force: true
      owner: "web"
      src: user_profile.j2
      dest: "/home/web/.profile"

- name: Setup postgres
  block:
  - name: Update apt cache
    apt:
      update_cache: yes
      cache_valid_time: 3600
    become: true

  - name: Install necessary dependencies
    apt:
      name:
        - gnupg2
        - wget
        - lsb-release
      state: present
    register: apt_install
    retries: 5
    delay: 30
    until: apt_install is not failed

  - name: Add key for Postgres repo
    apt_key: 
      url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
      state: present
    become: true

  - name: Wait for APT Lock
    shell:  while fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do sleep 5; done;

  - name: Add Postgres repo to sources list
    apt_repository:
      repo: "deb http://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg main"
      state: present
      filename: pgdg
    become: true
    register: postgres_repo
    retries: 5
    delay: 30
    until: postgres_repo is not failed

  - name: Install PostgreSQL and dependencies
    apt:
      name:
        - postgresql
        - postgresql-contrib
        - libpq-dev
        - python3-psycopg2
      state: present
    register: postgres_install
    retries: 5
    delay: 30
    until: postgres_install is not failed

  - name: Ensure PostgreSQL is started and enabled
    service:
      name: postgresql
      state: started
      enabled: yes

  - name: Create the Migration PostgreSQL user
    become_user: postgres
    postgresql_user:
      name: "{{ migration_db_user }}"
      password: "{{ migration_db_password }}"
      role_attr_flags: CREATEDB,NOSUPERUSER

  - name: Create the App PostgreSQL user
    become_user: postgres
    postgresql_user:
      name: "{{ db_user }}"
      password: "{{ db_password }}"
      role_attr_flags: NOSUPERUSER

  - name: Create a PostgreSQL database
    become_user: postgres
    postgresql_db:
      name: moviesdatabase
      owner: "{{ db_user }}"
    
- name: Install Certbot And Configure Certbot
  vars:
    certbot_auto_renew_user: web
    certbot_auto_renew_hour: "3"
    certbot_auto_renew_minute: "30"
    certbot_auto_renew_options: "--quiet --no-self-upgrade"
    certbot_create_if_missing: yes
    certbot_create_method: standalone
    certbot_admin_email: john@jmaguire.tech
    certbot_certs:
      - domains:
          - movies-with-friends.com
          - www.movies-with-friends.com
  block:
  - name: Install Certbot
    snap:
      name: certbot
      classic: true

  - name: Symlink certbot
    shell: ln -s /snap/bin/certbot /usr/bin/certbot

  # - name: Check if certificate already exists
    # stat:
      # path: /etc/letsencrypt/live/{{ item.domains[0] }}/cert.pem
    # register: cert_file
    # with_items: "{{ certbot_certs }}"

  # - name: Generate new certificate if one doesn't exist
    # command: >
      # certbot certonly --standalone
      # --noninteractive --agree-tos
      # --email {{ certbot_admin_email }}
      # -d {{ item.item.domains | join(',') }}
    # with_items: "{{ cert_file.results }}"
    # when: 
      # - certbot_create_if_missing
      # - not item.stat.exists

  - name: Create Certbot renewal cron job
    cron:
      name: Certbot automatic renewal
      user: "{{ certbot_auto_renew_user }}"
      hour: "{{ certbot_auto_renew_hour }}"
      minute: "{{ certbot_auto_renew_minute }}"
      job: "certbot renew {{ certbot_auto_renew_options }}"

  - name: Ensure Certbot hook directories exist
    file:
      path: "{{ item }}"
      state: directory
      mode: '0755'
    loop:
      - /etc/letsencrypt/renewal-hooks/pre
      - /etc/letsencrypt/renewal-hooks/post

  - name: Create post-renewal reload script
    copy:
      dest: /etc/letsencrypt/renewal-hooks/post/reload-services.sh
      content: |
        #!/bin/bash
        systemctl reload app
      mode: '0755'
    when: ansible_service_mgr == "systemd"

- name: Install Goose
  vars:
    goose_version: "v3.22.1"  # Change this to the version you want
    goose_checksum: "sha256:86c4393deaa2de0125010bf8f9b525ad8cd7bd7ba0900ffdec42dfb98170877b"
    goose_arch: "x86_64"  # Change to "arm64" if needed
    goose_os: "linux"  # Change to "darwin" for macOS
  block:
  - name: Create temporary directory
    tempfile:
      state: directory
      suffix: goose
    register: tempdir

  - name: Download Goose
    get_url:
      url: "https://github.com/pressly/goose/releases/download/{{ goose_version }}/goose_{{ goose_os }}_{{ goose_arch }}"
      dest: "{{ tempdir.path }}/goose"
      checksum: "{{ goose_checksum }}"
      mode: '0755'

  - name: Move Goose to /usr/local/bin
    copy:
      src: "{{ tempdir.path }}/goose"
      dest: "/usr/local/bin/goose"
      mode: '0755'
      remote_src: yes

  - name: Clean up temporary directory
    file:
      path: "{{ tempdir.path }}"
      state: absent

  - name: Verify Goose installation
    command: goose --version
    register: goose_version_output
    changed_when: false

  - name: Display Goose version
    debug:
      var: goose_version_output.stdout_lines

- name: Setup movies app
  block:
  - name: Create movies directory
    file:
      path: /etc/movies
      state: directory
      mode: '0755'

  - name: Copy over env
    template:
      src: systemd_env_file.j2
      dest: "/etc/movies/env"

  - name: Copy over systemd service for movies
    copy:
      src: movies.service
      dest: "/lib/systemd/system/movies.service"

  - name: open port 443
    ufw:
      rule: allow
      port: 443
      proto: tcp

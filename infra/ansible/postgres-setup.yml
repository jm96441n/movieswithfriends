---
- name: Setup PostgreSQL Database and Users
  hosts: all
  become: true
  vars:
    # Database configuration
    db_name: "{{ lookup('env', 'DB_NAME') }}"
    
    # Migration user (full access)
    migration_user: "{{ lookup('env', 'DB_MIGRATION_USER') }}"
    migration_password: "{{ lookup('env', 'DB_MIGRATION_PASSWORD') }}"
    
    # Application user (restricted access)
    app_user: "{{ lookup('env', 'DB_USER') }}"
    app_password: "{{ lookup('env', 'DB_PASSWORD') }}"

  pre_tasks:
    - name: Ensure passwords are set
      fail:
        msg: "Both migration and application user passwords must be set via environment variables or --extra-vars"
      when: not (migration_password is defined and migration_password != '' and app_password is defined and app_password != '')

  tasks:
    - name: Check if database exists
      postgresql_query:
        db: postgres
        query: >
          SELECT 1 FROM pg_database WHERE datname = %s
        positional_args:
          - "{{ db_name }}"
      become: true
      become_user: postgres
      register: db_exists
      ignore_errors: true  # In case of connection issues, we'll still try to create

    - name: Create database
      postgresql_db:
        name: "{{ db_name }}"
        encoding: UTF-8
        lc_collate: en_US.UTF-8
        lc_ctype: en_US.UTF-8
        template: template0
        state: present
      become: true
      become_user: postgres
      when: db_exists.rowcount is not defined or db_exists.rowcount == 0

    - name: Create migration user
      postgresql_user:
        name: "{{ migration_user }}"
        password: "{{ migration_password }}"
        role_attr_flags: NOSUPERUSER,NOCREATEDB
        state: present
      become: true
      become_user: postgres

    - name: Create application user
      postgresql_user:
        name: "{{ app_user }}"
        password: "{{ app_password }}"
        role_attr_flags: NOSUPERUSER,NOCREATEDB,NOCREATEROLE
        state: present
      become: true
      become_user: postgres

    - name: Grant migration user full access to database
      postgresql_privs:
        database: "{{ db_name }}"
        roles: "{{ migration_user }}"
        type: database
        privs: ALL
        state: present
      become: true
      become_user: postgres

    - name: Grant migration user schema privileges
      postgresql_privs:
        database: "{{ db_name }}"
        roles: "{{ migration_user }}"
        type: schema
        objs: public
        privs: ALL
        state: present
      become: true
      become_user: postgres

    - name: Grant migration user default table privileges
      postgresql_privs:
        database: "{{ db_name }}"
        schema: public
        roles: "{{ migration_user }}"
        type: default_privs
        target_roles: "{{ migration_user }}"
        objs: ALL_DEFAULT
        privs: ALL
        state: present
      become: true
      become_user: postgres

    - name: Grant application user connect access to database
      postgresql_privs:
        database: "{{ db_name }}"
        roles: "{{ app_user }}"
        type: database
        privs: CONNECT
        state: present
      become: true
      become_user: postgres

    - name: Grant application user schema usage
      postgresql_privs:
        database: "{{ db_name }}"
        roles: "{{ app_user }}"
        type: schema
        objs: public
        privs: USAGE
        state: present
      become: true
      become_user: postgres

    - name: Grant application user table privileges
      postgresql_privs:
        database: "{{ db_name }}"
        schema: public
        type: default_privs
        target_roles: "{{ migration_user }}"
        roles: "{{ app_user }}"
        objs: TABLES
        privs: SELECT,INSERT,UPDATE,DELETE
        state: present
      become: true
      become_user: postgres

    - name: Grant application user sequence privileges
      postgresql_privs:
        database: "{{ db_name }}"
        schema: public
        type: default_privs
        target_roles: "{{ migration_user }}"
        roles: "{{ app_user }}"
        objs: SEQUENCES
        privs: USAGE,SELECT
        state: present
      become: true
      become_user: postgres

  handlers:
    - name: restart postgresql
      service:
        name: postgresql
        state: restarted

---
- name: Deploy Go Application
  hosts: all
  become: true
  vars:
    app_name: movieswithfriends
    app_user: "{{ app_name }}"
    app_group: "{{ app_name }}"
    app_dir: "/opt/{{ app_name }}"
    binary_name: "{{ app_name }}"
    migrations_dir: "{{ app_dir }}/migrations"
    # Version can be passed as extra var
    app_version: "latest"
    # Database configuration
    db_host: "{{  lookup('env', 'DB_HOST') }}"
    db_name: "{{  lookup('env', 'DB_NAME') }}"
    db_migration_user: "{{ lookup('env', 'DB_MIGRATION_USER') }}"
    db_migration_password: "{{ lookup('env', 'DB_MIGRATION_PASSWORD') }}"
    db_user: "{{ lookup('env', 'DB_USER')  }}"
    db_password: "{{ lookup('env', 'DB_PASSWORD') }}"

    session_key: "{{ lookup('env', 'SESSION_KEY') }}"
    honeycomb_key: "{{ lookup('env', 'HONEYCOMB_KEY') }}"
    tmdb_api_key: "{{ lookup('env', 'TMDB_API_KEY') }}"

  tasks:
    - name: Ensure app group exists
      group:
        name: "{{ app_group }}"
        state: present

    - name: Ensure app user exists
      user:
        name: "{{ app_user }}"
        group: "{{ app_group }}"
        system: yes
        createhome: no
        shell: /sbin/nologin

    - name: Create application directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'
      with_items:
        - "{{ app_dir }}"
        - "{{ app_dir }}/bin"
        - "{{ migrations_dir }}"
        - "{{ app_dir }}/config"

    - name: Copy application binary
      copy:
        src: "files/{{ binary_name }}"
        dest: "{{ app_dir }}/bin/{{ binary_name }}"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'
      notify: restart application

    - name: Copy database migrations
      copy:
        src: "files/migrations/"
        dest: "{{ migrations_dir }}"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'

    - name: Copy application env
      template:
        src: templates/app.env.j2
        dest: "{{ app_dir }}/config/app.env"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'
      notify: restart application

    - name: Create systemd service file
      template:
        src: templates/app.service.j2
        dest: /etc/systemd/system/{{ app_name }}.service
        mode: '0644'
      notify: 
        - reload systemd
        - restart application

    - name: Run database migrations
      become_user: "{{ app_user }}"
      shell: |
        /usr/local/bin/goose \
          -dir {{ migrations_dir }} \
          postgres "host={{ db_host }} user={{ db_migration_user }} password={{ db_migration_password }} dbname={{ db_name }} sslmode=disable" \
          up
      register: migration_result
      changed_when: "'no change' not in migration_result.stdout"
      notify: restart application

    - name: Ensure application service is enabled and started
      systemd:
        name: "{{ app_name }}"
        state: started
        enabled: yes

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: restart application
      systemd:
        name: "{{ app_name }}"
        state: restarted
